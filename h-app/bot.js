import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";

dotenv.config();
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!TOKEN) {
  throw new Error("‚ö† L·ªói: Ch∆∞a c√≥ TELEGRAM_BOT_TOKEN trong .env");
}

const bot = new TelegramBot(TOKEN, { polling: true });
console.log("üöÄ Bot ƒëang ch·∫°y...");

const otpStore = new Map(); // L∆∞u OTP t·∫°m th·ªùi

// H√†m t·∫°o m√£ OTP ng·∫´u nhi√™n
const generateOTP = () => Math.floor(100000 + Math.random() * 900000).toString();

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i /start
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, "M·ªü ·ª©ng d·ª•ng:", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "M·ªü Web App",
            web_app: { url: "https://hrm-app-fawn.vercel.app/" },
          },
        ],
      ],
    },
  });
});

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i /otp
bot.onText(/\/otp/, (msg) => {
  const chatId = msg.chat.id;
  const otp = generateOTP();
  otpStore.set(chatId, otp);

  bot.sendMessage(chatId, `üîë M√£ OTP c·ªßa b·∫°n: *${otp}* (H·∫øt h·∫°n sau 5 ph√∫t)`, {
    parse_mode: "Markdown",
  });

  // X√≥a OTP sau 5 ph√∫t
  setTimeout(() => {
    otpStore.delete(chatId);
  }, 300000);
});

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ª≠i /verify <otp>
bot.onText(/\/verify (\d{6})/, (msg, match) => {
  const chatId = msg.chat.id;
  const userOtp = match[1]; // OTP ng∆∞·ªùi d√πng nh·∫≠p

  if (otpStore.has(chatId) && otpStore.get(chatId) === userOtp) {
    bot.sendMessage(chatId, "‚úÖ X√°c minh th√†nh c√¥ng!");
    otpStore.delete(chatId);
  } else if (otpStore.has(chatId)) {
    bot.sendMessage(chatId, "‚ùå M√£ OTP kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.");
  } else {
    bot.sendMessage(chatId, "‚ö† Kh√¥ng t√¨m th·∫•y OTP. Vui l√≤ng nh·∫≠p /otp ƒë·ªÉ l·∫•y m√£ m·ªõi.");
  }
});
